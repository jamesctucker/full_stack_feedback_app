{"version":3,"sources":["components/Home/Home.js","components/Understanding/Understanding.js","components/Support/Support.js","components/Comments/Comments.js","components/ThankYou/ThankYou.js","components/Admin/Admin.js","components/App/App.js","index.js"],"names":["Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleNextBtn","event","props","history","push","handleSubmitBtn","action","type","payload","state","rating","dispatch","setState","updateFeelingRating","target","value","status","text","reduxStore","feeling","understanding","support","comments","react_default","a","createElement","className","Card_default","Input_default","id","onChange","Button_default","variant","onClick","color","disabled","handleSubmitFinalFeedback","Component","connect","Understanding","updateUnderstandingRating","Support","updateSupportRating","Comments","feedbackRating","axios","method","url","data","then","response","console","log","catch","error","alert","updateComments","ThankYou","handleNewFeedback","Admin","App","HashRouter","rel","href","Route","exact","path","component","storeInstance","createStore","combineReducers","arguments","length","undefined","applyMiddleware","logger","ReactDOM","render","es","store","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.ae94dc50.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../App/App.css';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport Input from '@material-ui/core/Input';\n\n\nclass Home extends Component {\n    constructor() {\n        super();\n        this.state = {\n            rating: '',\n        }\n    }\n\n    // this function enables the user to click to navigate to the next part of the feedback\n    handleNextBtn = (event) => {\n        this.props.history.push('/2');\n    }\n    // this function sends feeling rating to the reducer and then resets the rating back to null\n    handleSubmitBtn = (event) => {\n        const action = { type: 'UPDATE_FEELING', payload: this.state.rating };\n        this.props.dispatch(action);\n        this.setState({\n            rating: '',\n        })\n    }\n    // this function updates the state\n    updateFeelingRating = (event) => {\n        this.setState({\n            rating: event.target.value,\n        })\n    }\n\n\n    render() {\n        // conditional rendering determines which 'submit' button is implemented on the page\n        let status = '';\n        let text = '';\n        if (this.props.reduxStore.feeling === 0 ||\n            this.props.reduxStore.understanding === 0 ||\n            this.props.reduxStore.support === 0 ||\n            this.props.reduxStore.comments === '') {\n            text = \"Please Finish Before Submitting\"\n            status = true;\n\n        } else {\n            text = \"Submit Final Feedback\"\n            status = false;\n        }\n        return (\n            <div>\n                <header className=\"App-header\">\n                    <h1 className=\"App-title\">Project Feedback Form</h1>\n                    <h4><i>Don't forget it!</i></h4>\n                </header>\n                <div className=\"Feedback-body\">\n                    <Card className=\"Card\">\n                        <h2>How are you feeling today?</h2>\n                        <p><i>On a scale of 1 - 5, with 5 being the best</i></p>\n                        <Input id=\"Rating-input\" onChange={this.updateFeelingRating}\n                            className=\"Feedback-input\" type=\"number\">\n                        </Input>\n                        <br />\n                        <br />\n                        <Button id=\"Submit-btn\" variant=\"contained\"\n                            onClick={this.handleSubmitBtn}>Enter</Button>\n                        <Button id=\"Next-btn\" color=\"primary\" variant=\"contained\"\n                            onClick={this.handleNextBtn}>Next</Button>\n                    </Card>\n                </div>\n                <div className=\"Feedback-review\">\n                    {/* This card displays the ratings that have been submitted up to that point */}\n                    <Card className=\"Card\">\n                        <h2>Review Your Feedback</h2>\n                        <h3>Feelings: {this.props.reduxStore.feeling}</h3>\n                        <h3>Understanding: {this.props.reduxStore.understanding}</h3>\n                        <h3>Support: {this.props.reduxStore.support}</h3>\n                        <h3>Comments: {this.props.reduxStore.comments}</h3>\n                        {/* conditionally-rendered button */}\n                        <Button id=\"Final-submit-btn\" color=\"primary\" variant=\"contained\"\n                            disabled={status} onClick={this.handleSubmitFinalFeedback}>{text}</Button>\n                    </Card>\n                </div>\n            </div>\n        )\n    }\n\n}\n\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(Home);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../App/App.css';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport Input from '@material-ui/core/Input';\n\n\n\n\nclass Understanding extends Component {\n    handleNextBtn = (event) => {\n        this.props.history.push('/3');\n    }\n    // this function sends understanding rating to the reducer and then resets the rating back to null\n    handleSubmitBtn = (event) => {\n        const action = { type: 'UPDATE_UNDERSTANDING', payload: this.state.rating };\n        this.props.dispatch(action);\n        this.setState({\n            rating: '',\n        })\n    }\n    // this function updates the state\n    updateUnderstandingRating = (event) => {\n        this.setState({\n            rating: event.target.value,\n        })\n    }\n    render() {\n        // conditional rendering determines which 'submit' button is implemented on the page\n        let status = '';\n        let text = '';\n        if (this.props.reduxStore.feeling === 0 ||\n            this.props.reduxStore.understanding === 0 ||\n            this.props.reduxStore.support === 0 ||\n            this.props.reduxStore.comments === '') {\n            text = \"Please Finish Before Submitting\"\n            status = true;\n\n        } else {\n            text = \"Submit Final Feedback\"\n            status = false;\n        }\n        return (\n            <div>\n                <header className=\"App-header\">\n                    <h1 className=\"App-title\">Project Feedback Form</h1>\n                    <h4><i>Don't forget it!</i></h4>\n                </header>\n                <div className=\"Feedback-body\">\n                    <Card className=\"Card\">\n                        <h2>How well are you understanding the content?</h2>\n                        <p><i>On a scale of 1 - 5, with 5 being the best</i></p>\n                        <Input id=\"Rating-input\" onChange={this.updateUnderstandingRating}\n                            className=\"Feedback-input\" type=\"number\">\n                        </Input>\n                        <br />\n                        <br />\n                        <Button id=\"Submit-btn\" variant=\"contained\"\n                            onClick={this.handleSubmitBtn}>Enter</Button>\n                        <Button id=\"Next-btn\" color=\"primary\" variant=\"contained\"\n                            onClick={this.handleNextBtn}>Next</Button>\n                    </Card>\n                </div>\n                <div className=\"Feedback-review\">\n                    {/* This card displays the ratings that have been submitted up to that point */}\n                    <Card className=\"Card\">\n                        <h2>Review Your Feedback</h2>\n                        <h3>Feelings: {this.props.reduxStore.feeling}</h3>\n                        <h3>Understanding: {this.props.reduxStore.understanding}</h3>\n                        <h3>Support: {this.props.reduxStore.support}</h3>\n                        <h3>Comments: {this.props.reduxStore.comments}</h3>\n                        {/* conditionally-rendered button */}\n                        <Button id=\"Final-submit-btn\" color=\"primary\" variant=\"contained\"\n                            disabled={status} onClick={this.handleSubmitFinalFeedback}>{text}</Button>\n                    </Card>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(Understanding);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport Input from '@material-ui/core/Input';\nimport '../App/App.css';\n\n\n\nclass Support extends Component {\n    handleNextBtn = (event) => {\n        this.props.history.push('/4');\n    }\n    // this function sends support rating to the reducer and then resets the rating back to null\n    handleSubmitBtn = (event) => {\n        const action = { type: 'UPDATE_SUPPORT', payload: this.state.rating };\n        this.props.dispatch(action);\n        this.setState({\n            rating: '',\n        })\n    }\n\n    // this function updates the state\n    updateSupportRating = (event) => {\n        this.setState({\n            rating: event.target.value,\n        })\n    }\n    render() {\n        // conditional rendering determines which 'submit' button is implemented on the page\n        let status = '';\n        let text = '';\n        if (this.props.reduxStore.feeling === 0 ||\n            this.props.reduxStore.understanding === 0 ||\n            this.props.reduxStore.support === 0 ||\n            this.props.reduxStore.comments === '') {\n            text = \"Please Finish Before Submitting\"\n            status = true;\n\n        } else {\n            text = \"Submit Final Feedback\"\n            status = false;\n        }\n        return (\n            <div>\n                <header className=\"App-header\">\n                    <h1 className=\"App-title\">Project Feedback Form</h1>\n                    <h4><i>Don't forget it!</i></h4>\n                </header>\n                <div className=\"Feedback-body\">\n                    <Card className=\"Card\">\n                        <h2>How well are you being supported?</h2>\n                        <p><i>On a scale of 1 - 5, with 5 being the best</i></p>\n                        <Input id=\"Rating-input\" onChange={this.updateSupportRating}\n                            className=\"Feedback-input\" type=\"number\">\n                        </Input>\n                        <br />\n                        <br />\n                        <Button id=\"Submit-btn\" variant=\"contained\"\n                            onClick={this.handleSubmitBtn}>Enter</Button>\n                        <Button id=\"Next-btn\" color=\"primary\" variant=\"contained\"\n                            onClick={this.handleNextBtn}>Next</Button>\n                    </Card>\n                </div>\n                <div className=\"Feedback-review\">\n                    {/* This card displays the ratings that have been submitted up to that point */}\n                    <Card className=\"Card\">\n                        <h2>Review Your Feedback</h2>\n                        <h3>Feelings: {this.props.reduxStore.feeling}</h3>\n                        <h3>Understanding: {this.props.reduxStore.understanding}</h3>\n                        <h3>Support: {this.props.reduxStore.support}</h3>\n                        <h3>Comments: {this.props.reduxStore.comments}</h3>\n                        {/* conditionally-rendered button */}\n                        <Button id=\"Final-submit-btn\" color=\"primary\" variant=\"contained\"\n                            disabled={status} onClick={this.handleSubmitFinalFeedback}>{text}</Button>\n                    </Card>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(Support);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport Input from '@material-ui/core/Input';\nimport '../App/App.css';\n\n\n\nclass Comments extends Component {\n    // this function gathers the submitted ratings and POSTS them to the database\n    handleSubmitFinalFeedback = (event) => {\n        let feedbackRating = {\n            feeling: this.props.reduxStore.feeling,\n            understanding: this.props.reduxStore.understanding,\n            support: this.props.reduxStore.support,\n            comments: this.props.reduxStore.comments\n        }\n        axios({\n            method: 'POST',\n            url: '/feedback',\n            data: feedbackRating\n        }).then((response) => {\n            console.log(response);\n            this.props.history.push('/5');\n        }).catch((error) => {\n            alert('Error with the server');\n        })\n    }\n    // this function sends comments to the reducer and then resets the rating back to null\n    handleSubmitBtn = (event) => {\n        const action = { type: 'UPDATE_COMMENTS', payload: this.state.rating };\n        this.props.dispatch(action);\n        this.setState({\n            rating: '',\n        })\n    }\n    // this function updates the state\n    updateComments = (event) => {\n        this.setState({\n            rating: event.target.value,\n        })\n    }\n    render() {\n        // conditional rendering determines which 'submit' button is implemented on the page\n        let status = '';\n        let text = '';\n        if (this.props.reduxStore.feeling === 0 ||\n            this.props.reduxStore.understanding === 0 ||\n            this.props.reduxStore.support === 0 ||\n            this.props.reduxStore.comments === '') {\n            text = \"Please Finish Before Submitting\"\n            status = true;\n\n        } else {\n            text = \"Submit Final Feedback\"\n            status = false;\n        }\n        return (\n            <div>\n                <header className=\"App-header\">\n                    <h1 className=\"App-title\">Project Feedback Form</h1>\n                    <h4><i>Don't forget it!</i></h4>\n                </header>\n                <div className=\"Feedback-body\">\n                    <Card className=\"Card\">\n                        <h2>Any comments you want to leave?</h2>\n                        <p><i>On a scale of 1 - 5, with 5 being the best</i></p>\n                        <Input id=\"Rating-input\" onChange={this.updateComments}\n                            className=\"Feedback-input\" type=\"string\">\n                        </Input>\n                        <br />\n                        <br />\n                        <Button id=\"Submit-btn\" variant=\"contained\"\n                            onClick={this.handleSubmitBtn}>Enter</Button>\n                    </Card>\n                </div>\n                {/* This card displays the ratings that have been submitted up to that point */}\n                <div className=\"Feedback-review\">\n                    <Card className=\"Card\">\n                        <h2>Review Your Feedback</h2>\n                        <h3>Feelings: {this.props.reduxStore.feeling}</h3>\n                        <h3>Understanding: {this.props.reduxStore.understanding}</h3>\n                        <h3>Support: {this.props.reduxStore.support}</h3>\n                        <h3>Comments: {this.props.reduxStore.comments}</h3>\n                        {/* conditionally-rendered button */}\n                        <Button id=\"Final-submit-btn\" color=\"primary\" variant=\"contained\"\n                            disabled={status} onClick={this.handleSubmitFinalFeedback}>{text}</Button>\n                    </Card>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(Comments);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../App/App.css';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\n\nclass ThankYou extends Component {\n\n    handleNewFeedback = (event) => {\n        this.props.history.push('/');\n    }\n    render() {\n        // renders a button that allows the user to submit an additional feedback form\n        return (\n            <div>\n                <header className=\"Thank-you-header\">\n                    <h1 className=\"Thank-you-title\">Project Feedback Form</h1>\n                </header>\n                <div className=\"Feedback-body\">\n                    <Card className=\"Card\">\n                        <h2>Thank You!</h2>\n                        <br />\n                        <br />\n                        <Button color=\"primary\" variant=\"contained\" onClick={this.handleNewFeedback}>Leave New Feedback</Button>\n                    </Card>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(ThankYou);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport '../App/App.css';\n\nclass Admin extends Component {\n    render() {\n        return (\n            <div>\n                <header className=\"App-header\">\n                    <h1 className=\"App-title\">Project Feedback Form</h1>\n                    <h4><i>Admin Review</i></h4>\n                </header>\n            </div>\n\n        )\n    }\n}\n\nexport default connect()(Admin);","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './../Home/Home.js';\nimport Understanding from './../Understanding/Understanding.js';\nimport Support from './../Support/Support.js';\nimport Comments from './../Comments/Comments.js';\nimport ThankYou from './../ThankYou/ThankYou.js';\nimport Admin from './../Admin/Admin.js';\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <div>\n            <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/2\" component={Understanding} />\n            <Route exact path=\"/3\" component={Support} />\n            <Route exact path=\"/4\" component={Comments} />\n            <Route exact path=\"/5\" component={ThankYou} />\n            <Route exact path=\"/admin\" component={Admin} />\n          </div>\n        </Router>\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n// import registerServiceWorker from './registerServiceWorker';\n\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\n\nconst feeling = (state = 0, action) => {\n    if (action.type === 'UPDATE_FEELING') {\n        return action.payload;\n    }\n    return state;\n}\n\nconst understanding = (state = 0, action) => {\n    if (action.type === 'UPDATE_UNDERSTANDING') {\n        return action.payload;\n    }\n    return state;\n}\n\nconst support = (state = 0, action) => {\n    if (action.type === 'UPDATE_SUPPORT') {\n        return action.payload;\n    }\n    return state;\n}\n\nconst comments = (state = 'None', action) => {\n    if (action.type === 'UPDATE_COMMENTS') {\n        return action.payload;\n    }\n    return state;\n}\n\nconst storeInstance = createStore(\n    combineReducers({\n        feeling,\n        understanding,\n        support,\n        comments,\n    }),\n    applyMiddleware(logger),\n);\n\nReactDOM.render(<Provider store={storeInstance}><App /></Provider>, document.getElementById('root'));\n"],"sourceRoot":""}